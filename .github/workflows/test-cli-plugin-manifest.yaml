name: Test CLI Plugin Manifest

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: your_cli_name

jobs:
  name: build the CLI binaries
  strategy:
    matrix:
      include:
        - runner: ubuntu-20.04
          target: x86_64-unknown-linux-gnu
        - runner: ubuntu-20.04
          target: aarch64-unknown-linux-gnu
          linux-packages: gcc-aarch64-linux-gnu
          linker: /usr/bin/aarch64-linux-gnu-gcc
        - runner: macos-latest
          target: x86_64-apple-darwin
        - runner: macos-latest
          target: aarch64-apple-darwin
        - runner: windows-latest
          target: x86_64-pc-windows-msvc
          extension: .exe
          extra-rust-flags: "-C target-feature=+crt-static"
  runs-on: ${{ matrix.runner }}
  env:
    CARGO_BUILD_TARGET: ${{ matrix.target }}
    CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      RUSTFLAGS: "-D warnings" # fail on warnings
  defaults:
    run:
      shell: bash
  steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Generate manifest entry
        shell: bash
        run: |
          # Calculate SHA256 of the binary
          if [ "${{ runner.os }}" = "Windows" ]; then
            SHA256=$(certutil -hashfile target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.binary_suffix }} SHA256 | grep -v "hash" | awk '{print $1}')
          else
            SHA256=$(sha256sum target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.binary_suffix }} | cut -d' ' -f1)
          fi

          # Create manifest entry
          echo "{
            \"name\": \"${{ env.BINARY_NAME }}\",
            \"target\": \"${{ matrix.target }}\",
            \"sha256\": \"${SHA256}\",
            \"url\": \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.pull_request.head.sha }}/${{ env.BINARY_NAME }}-${{ matrix.target }}${{ matrix.binary_suffix }}\"
          }" > manifest-entry.json

      - name: Upload manifest entry
        uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ matrix.target }}
          path: manifest-entry.json
          retention-days: 1

  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all manifest entries
        uses: actions/download-artifact@v4
        with:
          path: entries

      - name: Combine manifest entries
        run: |
          echo '{"binaries": [' > cli-manifest.json
          find entries -name "manifest-entry.json" -exec cat {} \; | sed '$!s/$/,/' >> cli-manifest.json
          echo ']}' >> cli-manifest.json

          echo "Generated CLI Plugin Manifest:"
          cat cli-manifest.json
