name: Test CLI Plugin Manifest

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: your_cli_name

jobs:
  build-cli-binaries:
    name: build the CLI binaries
    strategy:
      matrix:
        include:
          - runner: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            platform: linux-amd64
          - runner: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            linux-packages: gcc-aarch64-linux-gnu
            linker: /usr/bin/aarch64-linux-gnu-gcc
            platform: linux-arm64
          - runner: macos-latest
            target: x86_64-apple-darwin
            platform: darwin-amd64
            os: macOS
          - runner: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
            os: macOS
          - runner: windows-latest
            platform: windows-amd64
            target: x86_64-pc-windows-msvc
            extension: .exe
            extra-rust-flags: "-C target-feature=+crt-static"
    runs-on: ${{ matrix.runner }}
    env:
      CARGO_BUILD_TARGET: ${{ matrix.target }}
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      RUSTFLAGS: "-D warnings" # fail on warnings
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: install tools
        run: |
          rustup show
          rustup target add ${{ matrix.target }}

      - name: install other packages required
        if: matrix.linux-packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.linux-packages }}

      - name: build the CLI
        run: |
          # If we're on a tag, use the tag name as the release version.
          if [[ "$GITHUB_REF_TYPE" == 'tag' ]]; then
            # Ensure that the version specified in Cargo.toml is the same as the tag (with a 'v' prefix).
            CARGO_VERSION="$(cargo metadata --format-version=1 | jq -r '.packages | .[] | select(.name == "ndc-sqlserver") | .version')"
            echo "Git tag: ${GIT_REF_NAME}"
            echo "Cargo version: ${CARGO_VERSION}"

            if [[ "$GITHUB_REF_NAME" != "v${CARGO_VERSION}" ]]; then
              echo >&2 "The Git tag is \"${GITHUB_REF_NAME}\", but the version in Cargo.toml is \"${CARGO_VERSION}\"."
              echo >&2 'These must be the same, with a "v" prefix for the tag. Aborting.'
              exit 1
            fi
            export RELEASE_VERSION="$GITHUB_REF_NAME"
            echo "RELEASE_VERSION = ${RELEASE_VERSION}"
          fi

          if [[ -n '${{ matrix.linker }}' ]]; then
            TARGET_SCREAMING="$(echo '${{ matrix.target }}' | tr '[:lower:]' '[:upper:]' | tr '-' '_')"
            echo "CARGO_TARGET_${TARGET_SCREAMING}_LINKER"='${{ matrix.linker }}'
            declare "CARGO_TARGET_${TARGET_SCREAMING}_LINKER"='${{ matrix.linker }}'
            export "CARGO_TARGET_${TARGET_SCREAMING}_LINKER"
          fi

          if [[ -n '${{ matrix.extra-rust-flags }}' ]]; then
            RUSTFLAGS="${RUSTFLAGS} ${{ matrix.extra-rust-flags }}"
            export RUSTFLAGS
          fi
          echo "RUSTFLAGS = ${RUSTFLAGS}"

          echo "Building for target: ${CARGO_BUILD_TARGET}"
          cargo build --release --bin ndc-sqlserver-cli

          # Create platform-specific directory under cli/
          mkdir -p cli/${{ matrix.platform }}

          # Move the binary with the correct name
          if [[ "${{ matrix.platform }}" == "windows-amd64" ]]; then
            mv -v target/${{ matrix.target }}/release/ndc-sqlserver-cli${{ matrix.extension }} cli/${{ matrix.platform }}/hasura-ndc-sqlserver.exe
          else
            mv -v target/${{ matrix.target }}/release/ndc-sqlserver-cli cli/${{ matrix.platform }}/hasura-ndc-sqlserver
          fi

      - name: Generate manifest entry
        shell: bash
        run: |

          # Calculate SHA256 of the binary
          if [[ "${{ matrix.platform }}" == "windows-amd64" ]]; then
            SHA256=$(certutil -hashfile cli/${{ matrix.platform }}/hasura-ndc-sqlserver.exe SHA256 | grep -v "hash" | awk '{print $1}')
          elif [[ "${{ matrix.os }}" == "macOS" ]]; then
            SHA256=$(shasum -a 256 cli/${{ matrix.platform }}/hasura-ndc-sqlserver | cut -d' ' -f1)
          else
            SHA256=$(sha256sum cli/${{ matrix.platform }}/hasura-ndc-sqlserver | cut -d' ' -f1)
          fi

          # Create manifest entry
          echo "{
            \"name\": \"hasura-ndc-sqlserver\",
            \"platform\": \"${{ matrix.platform }}\",
            \"sha256\": \"${SHA256}\",
            \"url\": \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.pull_request.head.sha }}/hasura-ndc-sqlserver-${{ matrix.platform }}${{ matrix.extension }}\"
          }" > manifest-entry.json

      - name: Upload manifest entry
        uses: actions/upload-artifact@v4
        with:
          name: manifest-${{ matrix.platform }}
          path: manifest-entry.json
          retention-days: 1

      # - name: Generate manifest entry
      #   shell: bash
      #   run: |
      #     # Calculate SHA256 of the binary
      #     if [ "${{ runner.os }}" = "Windows" ]; then
      #       SHA256=$(certutil -hashfile target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.binary_suffix }} SHA256 | grep -v "hash" | awk '{print $1}')
      #     else
      #       SHA256=$(sha256sum target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.binary_suffix }} | cut -d' ' -f1)
      #     fi

      #     # Create manifest entry
      #     echo "{
      #       \"name\": \"${{ env.BINARY_NAME }}\",
      #       \"target\": \"${{ matrix.target }}\",
      #       \"sha256\": \"${SHA256}\",
      #       \"url\": \"https://github.com/${{ github.repository }}/releases/download/${{ github.event.pull_request.head.sha }}/${{ env.BINARY_NAME }}-${{ matrix.target }}${{ matrix.binary_suffix }}\"
      #     }" > manifest-entry.json

      # - name: Upload manifest entry
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: manifest-${{ matrix.target }}
      #     path: manifest-entry.json
      #     retention-days: 1

  create-manifest:
    needs: build-cli-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all manifest entries
        uses: actions/download-artifact@v4
        with:
          path: entries

      - name: Combine manifest entries
        run: |
          echo '{"binaries": [' > cli-manifest.json
          find entries -name "manifest-entry.json" -exec cat {} \; | sed '$!s/$/,/' >> cli-manifest.json
          echo ']}' >> cli-manifest.json

          echo "Generated CLI Plugin Manifest:"
          cat cli-manifest.json
